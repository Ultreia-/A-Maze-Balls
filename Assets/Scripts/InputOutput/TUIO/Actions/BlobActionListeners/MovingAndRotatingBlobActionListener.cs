using UnityEngine;
using System.Collections;
using TUIO;

/**
 * Do not edit this file - instead see ExampleCustomMovingBlobActionsListener.cs
 * for an example on how to add custom code
 */
public class MovingAndRotatingBlobActionListener : BlobActionListener {
	public enum MovementAxis { NONE, X, Y, Z, XY, XZ, YX, YZ, ZX, ZY }
	public MovementAxis movementAxis = MovementAxis.XY;
	public enum RotationAxis { NONE, X, REVX, Y, REVY, Z, REVZ }
	public RotationAxis rotationAxis = RotationAxis.X;

	public float scalePositionX = 1f;
	public float scalePositionY = 1f;

	public override void updateTuioBlob(TuioBlob b){
		transform.localPosition = getMoveVector(b);
		transform.localRotation = getRotationQuaternion(b);
	}
	
	protected Vector3 getMoveVector(TuioBlob b){		
		switch (movementAxis) {
			case MovementAxis.X : 
				return new Vector3(b.getX()*scalePositionX, transform.localPosition.y, transform.localPosition.z);
			case MovementAxis.Y : 
				return new Vector3(transform.localPosition.x, b.getX()*scalePositionX, transform.localPosition.z);
			case MovementAxis.Z : 
				return new Vector3(transform.localPosition.x, transform.localPosition.y, b.getX()*scalePositionX);
			case MovementAxis.XY : 
				return new Vector3(b.getX()*scalePositionX, b.getY()*scalePositionY, transform.localPosition.z);
			case MovementAxis.XZ : 
				return new Vector3(b.getX()*scalePositionX, transform.localPosition.y, b.getY()*scalePositionY);
			case MovementAxis.YX : 
				return new Vector3(b.getY()*scalePositionY, b.getX()*scalePositionX, transform.localPosition.z);
			case MovementAxis.YZ : 
				return new Vector3(transform.localPosition.x, b.getX()*scalePositionX, b.getY()*scalePositionY);
			case MovementAxis.ZX : 
				return new Vector3(b.getY()*scalePositionY, transform.localPosition.y, b.getX()*scalePositionX);
			case MovementAxis.ZY : 
				return new Vector3(transform.localPosition.x, b.getY()*scalePositionY, b.getX()*scalePositionX);
			case MovementAxis.NONE : 
			default : 
				return transform.localPosition;
		}
    }

	protected Quaternion getRotationQuaternion(TuioBlob b){
		float angleDegrees = b.getAngleDegrees();
        switch (rotationAxis){
            case RotationAxis.X:
                return Quaternion.AngleAxis(angleDegrees, Vector3.right);
            case RotationAxis.Y:
                return Quaternion.AngleAxis(angleDegrees, Vector3.up);
           case RotationAxis.Z:
                return Quaternion.AngleAxis(angleDegrees, Vector3.forward);
            case RotationAxis.REVX:
                return Quaternion.AngleAxis(-angleDegrees, Vector3.right);
            case RotationAxis.REVY:
                return Quaternion.AngleAxis(-angleDegrees, Vector3.up);
           case RotationAxis.REVZ:
                return Quaternion.AngleAxis(-angleDegrees, Vector3.forward);
			case RotationAxis.NONE:
			default:
				return transform.localRotation;
        }
    }
}
